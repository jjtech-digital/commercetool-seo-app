{"version":3,"file":"9504.route-catch-all.8d759ff446f1cf0863fb.js","mappings":"g1BAOA,MAAMA,gBAAkB,MACtB,IAAAC,YAAU,KACR,EAAAC,EAAA,QAAiB,GAChB,IACI,MAEHC,cAAgB,KAEE,IAAAC,MAaI,QAAI,KAAO,CACnCC,UAAU,QAAIL,gBAAiB,CAAC,MAM3B,QAAI,KAAO,CAChBK,UAAU,QAAI,KAAc,CAAC,I","sources":["webpack://merchant-center-custom-application/./node_modules/@commercetools-frontend/application-shell/dist/route-catch-all-4af77675.esm.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { Route } from 'react-router-dom';\nimport { PageNotFound } from '@commercetools-frontend/application-components';\nimport { u as useIsServedByProxy, l as location } from './use-is-served-by-proxy-77984220.esm.js';\nimport { jsx } from '@emotion/react/jsx-runtime';\nimport '@commercetools-frontend/application-shell-connectors';\n\nconst ForcePageReload = () => {\n  useEffect(() => {\n    location.reload();\n  }, []);\n  return null;\n};\nconst RouteCatchAll = () => {\n  // NOTE: it's important that the return value is a `Route` component!\n  const servedByProxy = useIsServedByProxy();\n  // In case the application is served by a proxy server, we assume that\n  // the reverse proxy router handles requests forwarding to the specified\n  // service.\n  // For example, if the current \"loaded\" app is products and I click\n  // on a link to discounts, the products app does not know about the\n  // discount routes, thus falling back to this \"catch all route\" component.\n  // At this point we force a page reload, effectively handing the\n  // route control logic to the reverse proxy in our cluster. There,\n  // the router mapping will match the discounts route and it will forward\n  // the request to the discounts app.\n  // If no route matches, the application fallback will handle the request\n  // instead, showing e.g. a 404 page.\n  if (servedByProxy) return jsx(Route, {\n    children: jsx(ForcePageReload, {})\n  });\n\n  // In case we are developing the app locally, we simply render a 404\n  // page because we most likely don't have other \"apps\" running at the same\n  // time.\n  return jsx(Route, {\n    children: jsx(PageNotFound, {})\n  });\n};\n\nexport { RouteCatchAll as default };\n"],"names":["ForcePageReload","useEffect","l","RouteCatchAll","u","children"],"sourceRoot":""}